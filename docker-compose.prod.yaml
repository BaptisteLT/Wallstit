version: '3'

networks:
  nginx-php81-mariadb106-adminer-node:

services:
  nginx-service:
    image: nginx:stable-alpine
    container_name: nginx-container
    ports:
      #Vu que j'ai apache2 qui tourne déjà sur le port 80, je vais forwarder wallstit.com depuis apache2 vers le port 8081
      - "8081:80"
    volumes:
      - js_build:/var/www/project/public/build  # Use the js_build volume
      #Ici on copie toute l'application symfony vers /var/www/project dans le conteneur
      - .:/var/www/project
      #Ici ./nginx/default.conf est un chemin et non un nom
      - ./nginx/default.prod.conf:/etc/nginx/conf.d/default.conf
      #Pour lets encrypt
      #- ./certbot/www/:/var/www/certbot/:ro

    depends_on:
      #On dit que php et mariadb doivent démarrer avant le service nginx
      - php81-service
      - mariadb106-service
    networks:
      - nginx-php81-mariadb106-adminer-node
  
  #Lets encrypt, tutorial suivi: https://phoenixnap.com/kb/letsencrypt-docker
  #certbot:
  #  image: certbot/certbot:latest
  #  volumes:
  #    - ./certbot/www/:/var/www/certbot/:rw
  #    - ./certbot/conf/:/etc/letsencrypt/:rw

  php81-service:
    volumes:  
      # Permet de présever var afin qu'il ne soit pas supprimé
      - js_build:/var/www/project/public/build
      # Permet de présever var afin qu'il ne soit pas supprimé
      - /var/www/project/var
      # Permet de présever node_modules afin qu'ils ne soient pas supprimés à la fin du build dans le Dockerfile
      - /var/www/project/node_modules
      #Permet de préserver vendor, autrement il serait écrasé
      - /var/www/project/vendor
      #.fait référence au projet
      - .:/var/www/project
    build:
      context: .
      dockerfile: ./php/Dockerfile
    container_name: php81-container
    ports:
      - "9000:9000"
    networks:
      - nginx-php81-mariadb106-adminer-node
    depends_on:
      #On dit que php et mariadb doivent démarrer avant le service nginx
      - mariadb106-service
    working_dir: /var/www/project
    # Génère la base de données, lance les migrations et crée le private et public JWT
    command: >
      /bin/bash -c "([ ! -f config/jwt/private.pem ] && [ ! -f config/jwt/public.pem ] && php bin/console lexik:jwt:generate-keypair --overwrite) || true && php bin/console doctrine:database:create --if-not-exists && php bin/console doctrine:migrations:migrate > /var/www/project/database_create.log 2>&1 && php-fpm"

  mariadb106-service:
    image: mariadb:10.6
    restart: always
    container_name: mariadb106-container
    ports:
      - "3307:3306"
    volumes:
      - ./mariadb:/var/lib/mariadb
    environment:
      MARIADB_ROOT_PASSWORD: root
    networks:
      - nginx-php81-mariadb106-adminer-node

  adminer-service:
    image: adminer
    restart: always
    container_name: adminer-container
    ports:
      - 9090:8080
    networks:
      - nginx-php81-mariadb106-adminer-node
    #Connection adminer serveur: mariadb106-container user: root, password: root

  #node-service:
    #image: node:latest
    #container_name: node-container
    #environment:
    #  - NODE_ENV=production
    #volumes: 
      #- /var/www/project/public/build
      #Permet de préserver le dossier node_modules afin qu'il ne soit pas écrasé
      #- /var/www/project/node_modules
      #- .:/var/www/project
    #build:
      #context: .
      #dockerfile: ./node/Dockerfile
    #working_dir: /var/www/project
    #networks:
      #- nginx-php81-mariadb106-adminer-node

volumes:
  js_build: